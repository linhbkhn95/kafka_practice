[2020-04-02 19:04:45,033] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:04:45,034] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:04:45,034] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:09:45,035] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:09:45,035] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:09:45,035] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:14:45,036] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:14:45,039] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:14:45,039] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:19:45,039] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:19:45,039] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:19:45,039] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:24:45,040] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:24:45,043] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:24:45,043] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:29:45,044] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:29:45,045] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:29:45,045] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:34:45,045] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:34:45,062] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:34:45,062] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:39:45,063] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:39:45,063] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:39:45,064] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-04-02 19:41:53,324] INFO [Controller id=0] Shutting down broker 0 (kafka.controller.KafkaController)
[2020-04-02 19:41:53,324] DEBUG [Controller id=0] All shutting down brokers: 0 (kafka.controller.KafkaController)
[2020-04-02 19:41:53,325] DEBUG [Controller id=0] Live brokers:  (kafka.controller.KafkaController)
[2020-04-02 19:41:53,329] TRACE [Controller id=0] All leaders =  (kafka.controller.KafkaController)
[2020-04-02 19:41:54,602] INFO [ControllerEventThread controllerId=0] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-02 19:41:54,603] INFO [ControllerEventThread controllerId=0] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-02 19:41:54,603] INFO [ControllerEventThread controllerId=0] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-02 19:41:54,604] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2020-04-02 19:41:54,604] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-04-02 19:41:54,606] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-04-02 19:41:54,606] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-04-02 19:41:54,607] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2020-04-02 19:41:54,607] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2020-04-02 19:41:54,607] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2020-04-02 19:41:54,609] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2020-04-02 19:42:27,926] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@721e0f4f, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-02 19:42:30,964] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-02 19:42:31,154] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-02 19:42:31,156] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-04-02 19:42:31,170] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-02 19:42:31,177] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-02 19:42:31,185] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-04-02 19:42:31,242] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 24) (kafka.controller.KafkaController)
[2020-04-02 19:42:31,249] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-04-02 19:42:31,262] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-02 19:42:31,298] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-02 19:42:31,299] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-04-02 19:42:31,314] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-02 19:42:31,314] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-02 19:42:31,315] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-02 19:42:31,333] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-02 19:42:31,333] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-02 19:42:31,333] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-02 19:42:31,333] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-02 19:42:31,334] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-02 19:42:31,381] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-02 19:42:31,382] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-02 19:42:31,385] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-02 19:42:31,385] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-02 19:42:31,388] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-02 19:42:31,389] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-02 19:42:31,396] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-02 19:42:31,396] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-02 19:42:31,410] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-02 19:42:31,411] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-02 19:42:31,411] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-02 19:42:31,411] INFO [RequestSendThread controllerId=0] Controller 0 connected to admina-GL553VE:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-02 19:42:31,411] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-02 19:42:31,450] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-02 19:42:31,472] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-02 19:42:36,479] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-02 19:42:36,479] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-02 19:42:36,481] DEBUG [Controller id=0] Preferred replicas by broker Map() (kafka.controller.KafkaController)
